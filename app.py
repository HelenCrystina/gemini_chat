import streamlit as st
import os
from gemini_client import GeminiClient

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Chat IA com Gemini", layout="wide")
st.title("ü§ñ Chat da Helen com IA - Google Gemini")

# Obt√©m a chave da API do ambiente ou define diretamente (menos seguro)
API_KEY = os.getenv("GEMINI_API_KEY") or "AIzaSyDoI726I60xUULjMfIcTqN2ojZBhBNcn60"

# Verifica√ß√£o de chave
if not API_KEY or API_KEY == "AIzaSyDoI726I60xUULjMfIcTqN2ojZBhBNcn60":
    st.error("‚ö†Ô∏è Insira sua chave da API Gemini no c√≥digo ou configure a vari√°vel de ambiente GEMINI_API_KEY.")
    st.stop()

# Inicializa cliente
client = GeminiClient(api_key=API_KEY)

# Armazena mensagens na sess√£o
if "mensagens" not in st.session_state:
    st.session_state.mensagens = []

# Mensagem inicial
if not st.session_state.mensagens:
    with st.chat_message("assistant"):
        st.markdown("Ol√°! Sou uma IA da Google. Fa√ßa sua pergunta abaixo üëá")

# Entrada do usu√°rio
prompt = st.chat_input("Digite sua pergunta...")

# Se o usu√°rio enviar algo
if prompt:
    st.session_state.mensagens.append({"role": "user", "text": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Gera√ß√£o de resposta
    resposta = client.ask(prompt)
    st.session_state.mensagens.append({"role": "assistant", "text": resposta})

    with st.chat_message("assistant"):
        st.markdown(resposta)

# Exibe hist√≥rico anterior se houver
for msg in st.session_state.mensagens:
    with st.chat_message(msg["role"]):
        st.markdown(msg["text"])
